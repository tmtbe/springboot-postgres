import org.testcontainers.containers.PostgreSQLContainer
buildscript {
    dependencies {
        classpath 'org.testcontainers:postgresql:1.19.5'
        classpath 'org.postgresql:postgresql:42.7.2'
        classpath 'org.flywaydb:flyway-database-postgresql:10.8.1'
    }
}

plugins {
    id 'java'
    id 'nu.studer.jooq' version '8.2'
    id 'org.flywaydb.flyway' version '10.8.1'
}

configurations {
    flywayMigration
}

dependencies {
    flywayMigration 'org.postgresql:postgresql:42.7.2'
    jooqGenerator 'org.postgresql:postgresql:42.7.2'
    implementation 'org.postgresql:postgresql:42.7.2'
    implementation 'org.flywaydb:flyway-core:10.8.1'
    implementation "org.flywaydb:flyway-database-postgresql:10.8.1"
}

def dbContainerInfo = [
        jdbcUrl: '',
        username: '',
        password: '',
        databaseName: '',
        instance: null
]

class DBStartTask extends DefaultTask {
    @Input
    LinkedHashMap<String, String> containerInfo = null

    @TaskAction
    def start() {
        println("Starting Pgsql container")
        var instance = new PostgreSQLContainer("postgres:16.2")
                .withDatabaseName('example')
        instance.start()
        containerInfo.jdbcUrl = instance.getJdbcUrl()
        containerInfo.username = instance.getUsername()
        containerInfo.password = instance.getPassword()
        containerInfo.databaseName = instance.getDatabaseName()
        containerInfo.instance = instance
    }
}

task startDbContainer(type: DBStartTask) {
    containerInfo = dbContainerInfo
}

tasks.named('startDbContainer').configure {
    onlyIf {
        project.hasProperty("gen")
    }
}

tasks.named('flywayMigrate').configure {
    onlyIf {
        project.hasProperty("gen")
    }
    dependsOn tasks.named('startDbContainer')
    doFirst {
        println("Setting up flyway")
        flyway {
            configurations = ['flywayMigration']
            url = dbContainerInfo.jdbcUrl
            user = dbContainerInfo.username
            password = dbContainerInfo.password
        }
    }
}

jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                generator {
                    target {
                        packageName = "${group}.${rootProject.name}"
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    onlyIf {
        project.hasProperty("gen")
    }
    dependsOn tasks.named('flywayMigrate')
    doFirst {
        jooq {
            configurations {
                main {
                    generationTool {
                        jdbc {
                            driver = 'org.postgresql.Driver'
                            url = dbContainerInfo.jdbcUrl
                            user = dbContainerInfo.username
                            password = dbContainerInfo.password
                        }
                        generator {
                            name = 'org.jooq.codegen.DefaultGenerator'
                            database {
                                name = 'org.jooq.meta.postgres.PostgresDatabase'
                                includes = '.*'
                                inputSchema = "public"
                                outputSchemaToDefault = true
                                forcedTypes {
                                    forcedType {
                                        name = 'BOOLEAN'
                                        includeTypes = 'BOOL'
                                    }
                                }
                            }
                            generate {
                                deprecated = false
                                records = true
                                pojos = true
                                interfaces = true
                                fluentSetters = true
                                nullableAnnotation = true
                                nullableAnnotationType = 'jakarta.annotation.Nullable'
                                nonnullAnnotation = true
                                nonnullAnnotationType = 'jakarta.annotation.Nonnull'
                                daos = true
                                springAnnotations = true
                                springDao = true
                            }
                        }
                    }
                }
            }
        }
    }
    doLast {
        println("Stopping Pgsql container")
        dbContainerInfo.instance.stop()
    }
}